package com.example.demo;

import java.io.FileInputStream;

import org.kie.api.KieBase;
import org.kie.api.KieServices;
import org.kie.api.builder.KieBuilder;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.Results;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.rule.FactHandle;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.example.demo.parser.userinfo;

@Component
public class Service {

	private KieServices ks;
	private KieContainer kContainer;
	private KieSession kieSession;
	private KieBase kb;
	@Bean("Service")
	@Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON)
	@Primary
	public Service getService() {
		return new Service();
		
	}
	
	public void initializeRules() throws Exception{
		this.ks = KieServices.Factory.get();
		KieFileSystem kfs= ks.newKieFileSystem();
		FileInputStream fis = new FileInputStream( "com/example/courseRecommender.drl" );
		kfs.write("src/main/resources/com/example/courseRecommeder.drl",ks.getResources().newInputStreamResource(fis));
		KieBuilder kieBuilder = ks.newKieBuilder( kfs ).buildAll();
		Results results = kieBuilder.getResults();
		this.kContainer = ks.newKieContainer(ks.getRepository().getDefaultReleaseId());
		this.kb=kContainer.getKieBase();
		this.kieSession = kContainer.newKieSession("courseRecommenderKS");
				
	}
	
	public int fireRules(userinfo person) {
		FactHandle facts=this.kieSession.insert(person);
		int rules= this.kieSession.fireAllRules();
		this.kieSession.delete(facts);
		return rules;
	}
}
